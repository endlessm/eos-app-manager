#!/usr/bin/gjs
// -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-

// Script to select the app server
//
// Usage:
//   eos-select-app-server [<app server>]
//
// For example:
//   eos-select-app-server              -- prompts user to select app server
//   eos-select-app-server http://my-server-url   -- custom server URL

const GLib = imports.gi.GLib;

const servers =
    ' TRUE https://appupdates.endlessm.com' +
    ' FALSE https://staging.appupdates.endlessm.com' +
    ' FALSE https://master.appupdates.endlessm-sf.com'

const doSpawn = function(cmdline) {
    try {
        let [res, stdout, stderr, status] = GLib.spawn_command_line_sync(cmdline);
        if (status != 0) {
            printerr('Error executing \'' + cmdline + '\'');
            if (stderr) {
                printerr(stderr);
            }
            res = false;
        }

        return [res, stdout, stderr, status];
    } catch (e) {
        logError(e, 'Error executing \'' + cmdline + '\'');
    }

    return [false, '', '', 256];
}

const selectServer = function() {
    let command = 'zenity --list --title="App server" --text="Select an option and hit OK\n(Cancel to keep existing configuration)" --radiolist --hide-header --column=button --column=selection --width 450 --height 200' + servers;

    let response = doSpawn(command);

    const STATUS = 3;
    const SELECTION = 1;
    let status = response[STATUS];
    let server;
    if (status == 0) {
        // User hit OK
        let selection = response[SELECTION];
        // Convert to string and trim the new line
        server = String(selection).trim();
    } else {
        // User canceled
        server = null;
    }
    return server;
}

const getServer = function(args) {
    let server;
    if (args.length == 0) {
        server = selectServer();
    } else if (args.length == 1) {
        server = args[0];
    } else {
        throw new Error('Invalid command-line: only 0 or 1 argument allowed');
    }
    return server;
}

const restartDaemon = function() {
    return doSpawn('pkill eamd');
}

const setConfigKey = function(key, value) {
    return doSpawn('eamctl config set ' + key + ' ' + value);
}

let server = getServer(ARGV);
if (server) {
    let [res, ] = setConfigKey('ServerUrl', server);
    if (res) {
        restartDaemon();
    }
}
